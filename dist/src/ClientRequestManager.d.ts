/// <reference types="node" />
import type { QBittorrentConnectionSettings } from './types/ClientConnectionSettings';
import type { QBittorrentAppPreferences } from './types/QBittorrentAppMethods';
import type { QBittorrentMainData, QBittorrentTorrentPeers } from './types/QBittorrentSyncMethods';
import type { QBittorrentTransferInfo } from './types/QBittorrentTransferMethods';
import type { QBittorrentTorrentContentPriority, QBittorrentTorrentContents, QBittorrentTorrentInfos, QBittorrentTorrentProperties, QBittorrentTorrentsAddOptions, QBittorrentTorrentTrackers } from './types/QBittorrentTorrentsMethods';
declare class ClientRequestManager {
    private connectionSettings;
    private apiBase;
    private authCookie?;
    private isMainDataPending;
    private syncRids;
    private syncStates;
    authenticate(connectionSettings?: {
        type: "web";
        client: "qBittorrent";
        version: 1;
        url: string;
        username: string;
        password: string;
    }): Promise<string | undefined>;
    updateAuthCookie(connectionSettings?: QBittorrentConnectionSettings): Promise<void>;
    getAppPreferences(): Promise<QBittorrentAppPreferences>;
    setAppPreferences(preferences: Partial<QBittorrentAppPreferences>): Promise<void>;
    getTorrentInfos(): Promise<QBittorrentTorrentInfos>;
    getTorrentContents(hash: string): Promise<QBittorrentTorrentContents>;
    getTorrentProperties(hash: string): Promise<QBittorrentTorrentProperties>;
    getTorrentTrackers(hash: string): Promise<QBittorrentTorrentTrackers>;
    getTransferInfo(): Promise<QBittorrentTransferInfo>;
    syncMainData(): Promise<QBittorrentMainData>;
    syncTorrentPeers(hash: string): Promise<QBittorrentTorrentPeers>;
    torrentsPause(hashes: Array<string>): Promise<void>;
    torrentsResume(hashes: Array<string>): Promise<void>;
    torrentsDelete(hashes: Array<string>, deleteFiles: boolean): Promise<void>;
    torrentsRecheck(hashes: Array<string>): Promise<void>;
    torrentsSetLocation(hashes: Array<string>, location: string): Promise<void>;
    torrentsSetTopPrio(hashes: Array<string>): Promise<void>;
    torrentsSetBottomPrio(hashes: Array<string>): Promise<void>;
    torrentsAddFiles(files: Array<Buffer>, options: QBittorrentTorrentsAddOptions): Promise<void>;
    torrentsAddURLs(urls: Array<string>, options: QBittorrentTorrentsAddOptions): Promise<void>;
    torrentsAddTags(hashes: Array<string>, tags: Array<string>): Promise<void>;
    torrentsRemoveTags(hashes: Array<string>, tags?: Array<string>): Promise<void>;
    torrentsAddTrackers(hash: string, urls: Array<string>): Promise<void>;
    torrentsReannounce(hashes: Array<string>): Promise<void>;
    torrentsRemoveTrackers(hash: string, urls: Array<string>): Promise<void>;
    torrentsSetSuperSeeding(hashes: Array<string>, value: boolean): Promise<void>;
    torrentsToggleSequentialDownload(hashes: Array<string>): Promise<void>;
    torrentsFilePrio(hash: string, ids: Array<number>, priority: QBittorrentTorrentContentPriority): Promise<void>;
    constructor(connectionSettings: QBittorrentConnectionSettings);
}
export default ClientRequestManager;
